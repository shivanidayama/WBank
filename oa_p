import org.keycloak.KeycloakSecurityContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.preauth.PreAuthenticatedAuthenticationProvider;
import org.springframework.security.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.session.HttpSessionEventPublisher;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSessionListener;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig {

    @Autowired
    private Environment env;

    @Autowired
    private UserDetailsService userDetailsService;

    @Value("${session.timeout:1800}")
    private Integer sessionTimeout;

    // Main Security configuration (replaces WebSecurityConfigurerAdapter)
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http, AbstractPreAuthenticatedProcessingFilter preAuthFilter) throws Exception {
        http
            .exceptionHandling(customizer -> customizer.authenticationEntryPoint(customAuthenticationEntryPoint()))
            .authorizeHttpRequests(authz -> authz
                .requestMatchers(
                    "/monitor/**", "/version/**",
                    "/accessDenied.html", "/accessDeniedDL.html",
                    "/assets/**", "/vendor/**",
                    "/*.eot", "/*.woff", "/*.woff2", "/*.ttf"
                ).permitAll()
                .requestMatchers("/staticResources/**", "/session/**").authenticated()
                .anyRequest().authenticated()
            )
            .csrf(csrf -> csrf.disable())
            .addFilter(preAuthFilter)
            .addFilterAfter(new SessionExpiredFilterImpl(), AbstractPreAuthenticatedProcessingFilter.class)
            .headers(headers -> headers.cacheControl(control -> {})) // Cache control headers, only if needed
            .sessionManagement(session -> session
                .maximumSessions(1)
                    .sessionRegistry(sessionRegistry())
                    .expiredUrl("/sessionExpired")
                .and()
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                .invalidSessionUrl("/sessionExpired")
            );

        return http.build();
    }

    // AuthenticationManager for pre-auth
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationProvider preAuthenticatedProvider) {
        return new ProviderManager(preAuthenticatedProvider);
    }

    // PreAuthenticatedAuthenticationProvider
    @Bean
    public AuthenticationProvider preAuthenticatedProvider() {
        PreAuthenticatedAuthenticationProvider provider = new PreAuthenticatedAuthenticationProvider();
        provider.setPreAuthenticatedUserDetailsService(userDetailsServiceWrapper());
        return provider;
    }

    // UserDetailsServiceWrapper for pre-auth
    @Bean
    public UserDetailsByNameServiceWrapper<?> userDetailsServiceWrapper() {
        return new UserDetailsByNameServiceWrapper<>(userDetailsService);
    }

    // Pre-authentication filter: extract principal from KeycloakSecurityContext
    @Bean
    public AbstractPreAuthenticatedProcessingFilter preAuthenticationFilter(AuthenticationManager authenticationManager) {
        AbstractPreAuthenticatedProcessingFilter filter = new AbstractPreAuthenticatedProcessingFilter() {
            @Override
            protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {
                KeycloakSecurityContext securityContext = (KeycloakSecurityContext) request.getAttribute(KeycloakSecurityContext.class.getName());
                if (securityContext != null) {
                    String preferredUsername = securityContext.getIdToken().getPreferredUsername();
                    if (preferredUsername == null) {
                        preferredUsername = securityContext.getIdToken().getEmail();
                    }
                    return preferredUsername;
                }
                return null;
            }
            @Override
            protected Object getPreAuthenticatedCredentials(HttpServletRequest request) {
                return "N/A";
            }
        };
        filter.setAuthenticationManager(authenticationManager);
        return filter;
    }

    // Keycloak OIDC filter registration
    @Bean
    public FilterRegistrationBean<Keycloak0IDCFilter> keycloakFilter() {
        FilterRegistrationBean<Keycloak0IDCFilter> registrationBean = new FilterRegistrationBean<>();
        Keycloak0IDCFilter filter = new Keycloak0IDCFilter();
        registrationBean.setFilter(filter);
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);
        KeycloakConfigurationResolver.env = env;
        registrationBean.addInitParameter(Keycloak0OIDCFilter.CONFIG_RESOLVER_PARAM, KeycloakConfigurationResolver.class.getName());
        registrationBean.addInitParameter(
            "keycloak.config.skipPattern",
            ".*/.*(app/.*|refreshSession|version|monitor.*|js|css|ico|png|svn|woff2|woff|eot|ttf|svg|accessDenied.*|sessionExpired.*)"
        );
        return registrationBean;
    }

    // Session and Event Beans
    @Bean
    public SessionRegistry sessionRegistry() {
        return new SessionRegistryImpl();
    }

    @Bean
    public ServletListenerRegistrationBean<HttpSessionEventPublisher> httpSessionEventPublisher() {
        return new ServletListenerRegistrationBean<>(new HttpSessionEventPublisher());
    }

    @Bean
    public HttpSessionListener httpSessionListener() {
        return new OapHttpSessionListener(sessionTimeout);
    }

    // Custom AuthenticationEntryPoint
    @Bean
    public AuthenticationEntryPoint customAuthenticationEntryPoint() {
        return new CustomAuthenticationEntryPoint();
    }

    // Register custom filters, e.g. SessionEqualizeFilter or others
    @Bean
    public FilterRegistrationBean<SessionEqualizeFilter> sessionEqualizer() {
        FilterRegistrationBean<SessionEqualizeFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new SessionEqualizeFilter());
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.LOWEST_PRECEDENCE);
        return registrationBean;
    }
}
