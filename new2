import org.keycloak.KeycloakSecurityContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.core.Ordered;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.PreAuthenticatedAuthenticationProvider;
import org.springframework.security.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;

import javax.servlet.http.HttpServletRequest;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig {

    @Value("${use.dummy.preauth:true}")
    private boolean useDummySSO;

    @Value("${use.dummy.user:unknown}")
    private String dummySSOUserEmail;

    @Value("${gko3.session-timeout}")
    private Integer sessionTimeout;

    @Autowired
    private Environment env;

    @Autowired
    private DbLUserDetailsServiceImpl userDetailsService;

    // Define AuthenticationProvider for pre-authenticated authentication
    @Bean
    public AuthenticationProvider preAuthenticatedAuthenticationProvider() {
        PreAuthenticatedAuthenticationProvider provider = new PreAuthenticatedAuthenticationProvider();
        provider.setPreAuthenticatedUserDetailsService(userDetailsServiceWrapper());
        return provider;
    }

    // Define your custom user details service wrapper
    @Bean
    public UserDetailsByNameServiceWrapper<?> userDetailsServiceWrapper() {
        return new UserDetailsByNameServiceWrapper<>(userDetailsService());
    }

    @Bean
    public UserDetailsService userDetailsService() {
        return this.userDetailsService;
    }

    // Define AuthenticationManager bean built from the AuthenticationProvider(s)
    @Bean
    public AuthenticationManager authenticationManager() {
        // In Spring Security 6.x, ProviderManager is the default AuthenticationManager implementation
        return new org.springframework.security.authentication.ProviderManager(preAuthenticatedAuthenticationProvider());
    }

    // Define your pre-authentication filter bean with the authenticationManager properly set
    @Bean
    public AbstractPreAuthenticatedProcessingFilter preAuthenticationFilter(AuthenticationManager authenticationManager) throws Exception {
        AbstractPreAuthenticatedProcessingFilter filter = new AbstractPreAuthenticatedProcessingFilter() {
            @Override
            protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {
                KeycloakSecurityContext securityContext =
                    (KeycloakSecurityContext) request.getAttribute(KeycloakSecurityContext.class.getName());
                String username = null;

                if (securityContext != null) {
                    // Extract the preferred username or email claim from the token if you want
                    username = securityContext.getToken().getPreferredUsername();
                } else if (useDummySSO) {
                    username = dummySSOUserEmail;
                }
                return username;
            }

            @Override
            protected Object getPreAuthenticatedCredentials(HttpServletRequest request) {
                return "N/A";
            }
        };

        filter.setAuthenticationManager(authenticationManager);
        return filter;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http, AbstractPreAuthenticatedProcessingFilter preAuthFilter) throws Exception {
        http
            .exceptionHandling(exception ->
                exception.authenticationEntryPoint(entryPoint()))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(
                    "/monitor/**",
                    "/version/**",
                    "/accessDenied.html",
                    "/accessDeniedDL.html",
                    "/assets/**",
                    "/vendor/**"
                ).permitAll()
                .requestMatchers("/wizard/**", "/staticResources/**", "/session/**").permitAll()
                .anyRequest().authenticated()
            )
            .csrf(csrf -> csrf.disable())
            .addFilter(preAuthFilter)
            .addFilterBefore(new SessionExpiredFilterImpl(), AbstractPreAuthenticatedProcessingFilter.class)
            .headers(headers -> headers.disable())
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                .invalidSessionUrl("/accessDenied.html")
            )
            .sessionManagement(session -> session
                .maximumSessions(1)
                .sessionRegistry(sessionRegistry())
            );

        return http.build();
    }

    @Bean
    public AuthenticationEntryPoint entryPoint() {
        return new CustomAuthenticationEntryPoint();
    }

    @Bean
    public FilterRegistrationBean<Keycloak0IDCFilter> keycloakFilter() {
        FilterRegistrationBean<Keycloak0IDCFilter> registrationBean = new FilterRegistrationBean<>();
        Keycloak0IDCFilter filter = new Keycloak0IDCFilter();
        registrationBean.setFilter(filter);
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);
        KeycloakConfigurationResolver.env = env;
        registrationBean.addInitParameter(Keycloak0OIDCFilter.CONFIG_RESOLVER_PARAM,
                KeycloakConfigurationResolver.class.getName());
        registrationBean.addInitParameter("keycloak.config.skipPattern",
            "./.(wizard/.*|workflow/.*|version.*|mor|js|css|ico|png|svn|woff2|woff|ttf|node_modules.*)");
        return registrationBean;
    }

    @Bean
    public org.springframework.security.core.session.SessionRegistry sessionRegistry() {
        return new org.springframework.security.core.session.SessionRegistryImpl();
    }

    @Bean
    public ServletListenerRegistrationBean<HttpSessionEventPublisher> httpSessionEventPublisher() {
        return new ServletListenerRegistrationBean<>(new HttpSessionEventPublisher());
    }

    @Bean
    public FilterRegistrationBean<SessionEqualizeFilter> sessionEqualizer() {
        FilterRegistrationBean<SessionEqualizeFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new SessionEqualizeFilter());
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.LOWEST_PRECEDENCE);
        return registrationBean;
    }

    @Bean
    public javax.servlet.http.HttpSessionListener httpSessionListener() {
        return new Gko3HttpSessionListener(sessionTimeout);
    }
}
